;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Qala View
;;;


(module qala.view jazz


(import (jazz.action)
        (jazz.application)
        (jazz.command)
        (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.layout)
        (jazz.locale)
        (jazz.markup)
        (jazz.match)
        (jazz.outline)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (irregex)
        (qala.settings)
        (qala.irc))


;;;
;;;; IRC-View
;;;


(class IRC-View extends Layout-View
  
  
  (method meta override (host-icon self)
    {Image-Resource "Pad"})
  
  (method meta override (host-title self)
    "IRC")
  
  (method meta override (host-size self)
    {Dimension 800 500})
  
  
  (slot client   initialize #f  getter generate)
  (slot channel  initialize #f  getter generate)
  (slot channels initialize '() getter generate)
  (slot thread   initialize #f  getter generate)
  
  
  (slot follow?     initialize (qala-follow?)     accessors generate)
  (slot highlight?  initialize (qala-highlight?)  accessors generate)
  (slot preferences initialize (qala-preferences) getter generate setter explicit)
  
  
  (form
    (<install>                                           layout-type: border
      (<Layout-View>                    name: toolbar    size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Action-Icon>                                   tooltip-text: "Quit Server" resource: {Image-Resource "Empty"} action-handler: {Event-Handler :form on-quit})
        (<Separator>)
        (<Action-Icon>                                   tooltip-text: "Reconnect Server" resource: {Image-Resource "Link"} action-handler: {Event-Handler :form on-reconnect})
        (<Separator>)
        (<Toggle-Tool>                  name: sound      size: {Dimension 22 22} tooltip?: #t tooltip-text: "Sound" resource: {Image-Resource "MsgUser"} portfolio: :images action-handler: {Event-Handler :form on-sound})
        (<Toggle-Tool>                  name: debug      size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Debug" resource: {Image-Resource "Debugger"} portfolio: :images action-handler: {Event-Handler :form on-debug}))
      (<Border-View>                                     location: center border-type: edge style: entry
        (<Splitter-View>                                 style: document orientation: horz mode: absolute division: -200
          (<Scroller-View>                               location: first position: {Point 46 0} size: {Dimension 300 19} style: document hscroll?: #f vscroll?: #t
            (<!>                        name: content    layout-type: fill
              (<IRC-Text-View>          name: text)))
          (<Splitter-View>                               style: document location: second orientation: vert mode: absolute division: 100
            (<Scroller-View>                             location: first style: document hscroll?: #t vscroll?: #t
              (<!>                      name: content    layout-type: fill
                (<IRC-Channels-View>    name: channels   multiple-selection?: #t portfolio: :images selection-handler: {Selection-Handler :form on-channel}
                  (<Tree-Node-Column>                    title: "Channel" display-images?: #f toplevel-controls?: #f width: 419))))
            (<Scroller-View>                             location: second style: document hscroll?: #t vscroll?: #t
              (<!>                      name: content    layout-type: fill
                (<IRC-Members-View>     name: members    multiple-selection?: #t portfolio: :images
                  (<Tree-Node-Column>                    title: "Member" display-images?: #f toplevel-controls?: #f width: 419)))))))
      (<IRC-Command-Shell>              name: shell      size: {Dimension 300 15} location: south)))
  
  
  (method override (destroy self)
    (disconnect self closing?: #t)
    (nextmethod self))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (locate-text self)
    (locate self 'text))
  
  
  (method public (locate-channels self)
    (locate self 'channels))
  
  
  (method public (locate-members self)
    (locate self 'members))
  
  
  (method public (locate-shell self)
    (locate self 'shell))
  
  
  (method (set-preferences self form)
    (set! preferences (instantiate form)))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-default self)
    (acquire-focus (get-text (locate self 'shell))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-quit self evt)
    (if (not client)
        (bell)
      (quit-command client)))
  
  
  (method (on-reconnect self evt)
    (if (not client)
        (bell)
      (reconnect self)))
  
  
  (method (on-channel self evt)
    (let ((channel (get-single-selected-data (locate-channels self))))
      (select-channel self channel)))
  
  
  (method (on-sound self evt)
    (if (not client)
        (bell)
      (set-sound? client (get-selected? (get-sender evt)))))
  
  
  (method (on-debug self evt)
    (if (not client)
        (bell)
      (set-debug? client (get-selected? (get-sender evt)))))
  
  
  ;;;
  ;;;; Callbacks
  ;;;
  
  
  (method (notice-callback self message)
    (insert self message))
  
  
  (method (join-callback self nickname user channel-name)
    (insert self (format "*** {a} joined {a}" nickname channel-name) 'Command)
    (if (me? client nickname)
        (join-channel channel-name)
      (channel-add self channel-name nickname)))
  
  
  (method (part-callback self nickname user channel-name)
    (insert self (format "*** {a} left {a}" nickname channel-name) 'Command)
    (if (me? client nickname)
        (part-channel channel-name)
      (channel-remove self channel-name nickname)))
  
  
  (method (quit-callback self nickname user)
    (insert self (format "*** {a} quit" nickname) 'Command)
    (if (me? client nickname)
        (post-event
          (lambda ()
            (disconnect self)))
      (for-each (lambda (channel)
                  (let ((channel-name (get-name channel)))
                    (channel-remove self channel-name nickname)))
                channels)))
  
  
  (method (topic-callback self channel-name topic)
    (let ((channel (find-channel self channel-name)))
      (when channel
        (set-topic channel topic)
        (topic-update self channel))))
  
  
  (method (topic-owner-callback self channel-name owner)
    (let ((channel (find-channel self channel-name)))
      (when channel
        (set-topic-owner channel owner)
        (topic-owner-update self channel))))
  
  
  (method (names-callback self channel-name member-names)
    (let ((channel (find-channel self channel-name)))
      (when channel
        (let ((actual-members
                (if (get-members-receiving? channel)
                    (get-members channel)
                  (set-members-receiving? channel #t)
                  '())))
          (set-members channel (append actual-members member-names))))))
  
  
  (method (names-end-callback self channel-name)
    (let ((channel (find-channel self channel-name)))
      (when channel
        (set-members-receiving? channel #f)
        (members-update self channel))))
  
  
  (method (privmsg-callback self nickname destination message)
    (let ((channel (find-channel self destination)))
      (let ((style (cond ((me? client nickname) 'Self)
                         ((highlight? destination message) 'Highlight)
                         ((get-color channel) => (lambda (color) (new Text-Style base: 'Base color: color)))
                         (else 'Message))))
        (match-regexp message
          (("\1ACTION (.*)\1" message)
           (insert self (format "[{a}] * {a} {a}" destination nickname message) style))
          (else
           (insert self (format "[{a}] <{a}> {a}" destination nickname message) style)))
        (unless (me? client nickname)
          (when (or (follow? destination) (eq? style 'Highlight))
            (send-event
              (lambda ()
                (when (get-sound? client)
                  (bell))
                (user-attention (current-toplevel)))))))))
  
  
  (method (mark-callback self)
    (insert self (make-string 100 #\-) 'Mark))
  
  
  (method (clear-callback self)
    (send-event
      (lambda ()
        (clear-all self (locate-text self)))))
  
  
  (method (numeric-callback self nickname messages)
    (insert self (format "*** {l detail: :human}" messages)))
  
  
  (method (default-callback self prefix command parameters)
    (insert self (format "*** {a} {l detail: :human}" command parameters)))
    
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (connect self)
    (define (setup-ui)
      (clear-all (locate-text self))
      (remove-every-row (locate-channels self))
      (remove-every-row (locate-members self)))
    
    (define (setup-client)
      (set! client (new IRC-Client view: self)))
    
    (define (setup-connection)
      (insert self (format "Connecting to {a}"
                           (get-server-address client)))
      (connect client))
    
    (define (setup-thread)
      (set! thread
            (thread-start!
              (new-thread
                (lambda ()
                  (declare (proper-tail-calls))
                  (let (process)
                    (when (process-input client)
                      (process))))))))
    
    (define (setup-interface)
      (set-selected? (locate self 'sound) (get-sound? client))
      (set-selected? (locate self 'debug) (get-debug? client)))
    
    (setup-ui)
    (setup-client)
    (setup-connection)
    (setup-thread)
    (setup-interface)
    client)
  
  
  (method (disconnect self (closing?: closing? #f))
    (when thread
      (thread-interrupt! thread thread-exit)
      (set! thread #f))
    (when client
      (let ((server-address (get-server-address client)))
        (disconnect client)
        (unless closing?
          (insert self (format "Disconnected from {a}" server-address)))))
    (set! channel #f)
    (set! channels '())
    (unless closing?
      (remove-every-row (locate-channels self))
      (remove-every-row (locate-members self))))
  
  
  (method (reconnect self)
    (disconnect self)
    (connect self)
    ((qala-connect) client))
    
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (insert self line (style #f))
    (define (emphasize text line char)
      (when (find line char)
        (let ((emphasis? #f))
          (for-each (lambda (part)
                      (if emphasis?
                          (insert-styled text part 'Emphasis)
                        (insert-string text part))
                      (set! emphasis? (not emphasis?)))
                    (split-string line char)))
        #t))
    
    (send-event
      (lambda ()
        (let ((text (locate-text self)))
          (let ((end (text-ending text)))
            (set-caret text end)
            (when (/= (get-col end) 0)
              (insert-newline text))
            (if style
                (insert-styled text line style)
              (or (emphasize text line #\x02)
                  (emphasize text line #\down-arrow)
                  (insert-string text line))))))))
    
  
  ;;;
  ;;;; Channels
  ;;;
  
  
  (method (join-channel self channel-name)
    (let ((channel (register-channel self channel-name))
          (tree (locate-channels self)))
      (add-row tree children: (list (new Tree-Node title: channel-name)) user-data: channel)
      (select-channel self channel)
      (let ((row (user-data-row tree channel)))
        (set-single-selection tree (row->line tree row)))))
  
  
  (method (part-channel self channel-name)
    (let ((channel (find-channel self channel-name)))
      (if (not channel)
          (bell)
        (unregister-channel self channel)
        (let ((tree (locate-channels self)))
          (let ((row (user-data-row tree channel)))
            (when row
              (remove-row tree row)
              (if (> (get-visible-count tree) 0)
                  (set-single-selection tree 0)
                (select-channel self #f))))))))
  
  
  (method (channel-add self channel-name member-name)
    (let ((chan (find-channel self channel-name)))
      (when chan
        (set-members chan (append (get-members chan) (list member-name)))
        (when (eq? chan channel)
          (let ((tree (locate-members self)))
            (add-row tree children: (list (new Tree-Node title: member-name)) user-data: member-name))))))
  
  
  (method (channel-remove self channel-name member-name)
    (let ((chan (find-channel self channel-name)))
      (when chan
        (set-members chan (remove! member-name (get-members chan) test: equal?))
        (when (eq? chan channel)
          (let ((tree (locate-members self)))
            (let ((row (user-data-row tree member-name test: equal?)))
              (when row
                (remove-row tree row))))))))
  
  
  (method (register-channel self channel-name)
    (define (channel-preferences)
      (or (find-component preferences channel-name)
          (find-component preferences #f)
          (qala-channel-preferences)))
    
    (let ((pref (channel-preferences)))
      (let ((channel (new IRC-Channel channel-name pref)))
        (set! channels (cons channel channels))
        channel)))
  
  
  (method (unregister-channel self channel)
    (set! channels (remove! channel channels)))
  
  
  (method (find-channel self name)
    (find channels name key: get-name test: equal? return: 'item))
  
  
  (method (require-channel self name)
    (or (find-channel self name)
        (error "Unregistered channel: {a}" name)))
  
  
  (method (select-channel self channel)
    (set! self.channel channel)
    (let ((tree (locate-members self)))
      (remove-every-row tree)
      (when channel
        (members-update self channel)))
    (name-update self channel))
  
  
  (method (name-update self channel)
    (send-event
      (lambda ()
        (set-title (get-host self) (if (not channel)
                                       "IRC"
                                     (present channel)))
        (clear-text (get-text (locate-shell self))))))
  
  
  (method (topic-update self channel)
    (send-event
      (lambda ()
        (set-title (get-host self) (present channel)))))
  
  
  (method (topic-owner-update self channel)
    )
  
  
  (method (members-update self channel)
    (fill-members self (get-members channel)))

  
  ;;;
  ;;;; Members
  ;;;
  
  
  (method (fill-members self member-names)
    (let ((tree (locate-members self)))
      (remove-every-row tree)
      (with-update-locked tree
        (lambda ()
          (define (standardize-name name)
            (if (starts-with? name "@")
                (tail name 1)
              name))
          
          (for-each (lambda (member-name)
                      (add-row tree children: (list (new Tree-Node title: member-name)) user-data: (standardize-name member-name)))
                    (sort di<? member-names))))))

  
  ;;;
  ;;;; Shell
  ;;;
  
  
  (method protected (process-command self command)
    (if (not client)
        (bell)
      (let ((channel-name (and channel (get-name channel))))
        (process client channel-name command)))))


;;;
;;;; IRC-Channel
;;;


(class IRC-Channel extends Object
  
  
  (slot name               getter generate)
  (slot preferences        getter generate)
  (slot topic              initialize #f  accessors generate)
  (slot topic-owner        initialize #f  accessors generate)
  (slot members            initialize '() accessors generate)
  (slot members-receiving? initialize #f  accessors generate)
  
  
  (method override (initialize self name preferences)
    (nextmethod self)
    (set! self.name name)
    (set! self.preferences preferences))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method (present self)
    (format "{a}{? : {a}~}" name topic))
  
  
  (method (get-color self)
    (get-color preferences)))


;;;
;;;; IRC-Channels-View
;;;


(class IRC-Channels-View extends Tree-View)


;;;
;;;; IRC-Members-View
;;;


(class IRC-Members-View extends Tree-View)


;;;
;;;; IRC-Text-View
;;;


(class IRC-Text-View extends Text-View
  
  
  (form
    (<install> left-padding: 1 top-padding: 1))
  
  
  (method override (new-model self)
    (new Text-Model wrap?: #t))

  
  (method override (install self rest)
    (nextmethod self rest)
    (let ((pref (preferences self)))
      (add-style self 'Emphasis  {Text-Style Base font: {Font Label-Bold}})
      (add-style self 'Command   {Text-Style Base})
      (add-style self 'Self      {Text-Style Base color: {Color Dark-Green}})
      (add-style self 'Message   {Text-Style Base color: {Color Dark-Blue}})
      (add-style self 'Highlight {Text-Style Base color: {Color Dark-Red}})
      (add-style self 'Mark      {Text-Style Base highlight: {Color Light-Red}}))))


;;;
;;;; IRC-Command-Shell
;;;


(class IRC-Command-Shell extends Command-Shell
  
  
  (method override (form-model self form)
    (case (get-name form)
      ((text) IRC-Command-Text-View)
      (else (nextmethod self form)))))


;;;
;;;; IRC-Command-Text-View
;;;


(class IRC-Command-Text-View extends Command-Text-View
  
  
  (form
    (<install> left-padding: 1 top-padding: 1))
  
  
  (method override (default-mode self)
    (new IRC-Mode self))
  
  
  (method override (focus-select-all self)
    (set-selection self (field-range self (last-field self))))
  
  
  (method override (focus-empty self)
    )
  
  
  (method protected (clear-text self)
    (clear-all self)
    (let ((view (find-ascendant self IRC-View)))
      (let ((channel (get-channel view)))
        (when channel
          (let ((color (or (get-color channel) {Color Dark-Blue})))
            (add-style self 'Separator (new Text-Style base: 'Base color: color))
            (insert-styled self (format "{a}: " (get-name channel)) 'Separator)))))))


;;;
;;;; IRC-Mode
;;;


(class IRC-Mode extends Command-Mode
  
  
  (method override (mode-actions self)
    (find-actions 'irc-mode))
  
  
  (method (on-finish self evt)
    (process-command (get-guest text) (last-content text))
    (clear-text text))
  
  
  (method (on-cancel self evt)
    (cancel self)))


;;;
;;;; IRC-Mode-Actions
;;;


(class IRC-Mode-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: finish action-handler: {Event-Handler (:focus :mode) on-finish} shortcut: {Shortcut Return})
      (<Action-Item> name: cancel action-handler: {Event-Handler (:focus :mode) on-cancel} shortcut: {Shortcut :control #\Q} alternate-shortcut: {Shortcut Escape})))))
