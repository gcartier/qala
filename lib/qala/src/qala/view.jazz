;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Qala View
;;;


(module qala.view jazz


(import (jazz.action)
        (jazz.application)
        (jazz.event)
        (jazz.graphic)
        (jazz.jml)
        (jazz.locale)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (irregex)
        (jazz.window)
        (qala.settings)
        (qala.irc))


;;;
;;;; IRC-View
;;;


(class IRC-View extends Layout-View
  
  
  (method meta override (host-icon)
    {Image-Resource "Pad"})
  
  (method meta override (host-title)
    "IRC")
  
  (method meta override (host-size)
    {Dimension 800 500})
  
  
  (slot client   initialize #f  getter generate)
  (slot channel  initialize #f  getter generate)
  (slot channels initialize '() getter generate)
  (slot thread   initialize #f  getter generate)
  
  
  (slot follow?     initialize (qala-follow?)     accessors generate)
  (slot highlight?  initialize (qala-highlight?)  accessors generate)
  (slot preferences initialize (qala-preferences) getter generate setter explicit)
  
  
  (form
    (<install>                                           layout-type: border
      (<Layout-View>                    name: toolbar    size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Action-Icon>                                   tooltip-text: "Quit Server" resource: {Image-Resource "Empty"} action-handler: {Event-Handler :form on-quit})
        (<Separator>)
        (<Action-Icon>                                   tooltip-text: "Reconnect Server" resource: {Image-Resource "Link"} action-handler: {Event-Handler :form on-reconnect})
        (<Separator>)
        (<Toggle-Tool>                  name: sound      size: {Dimension 22 22} tooltip?: #t tooltip-text: "Sound" resource: {Image-Resource "MsgUser"} portfolio: :images action-handler: {Event-Handler :form on-sound})
        (<Toggle-Tool>                  name: debug      size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Debug" resource: {Image-Resource "Debugger"} portfolio: :images action-handler: {Event-Handler :form on-debug}))
      (<Border-View>                                     location: center border-type: edge style: entry
        (<Splitter-View>                                 style: document orientation: horz mode: absolute division: -200
          (<Scroller-View>                               location: first position: {Point 46 0} size: {Dimension 300 19} style: document hscroll?: #f vscroll?: #t
            (<!>                        name: content    layout-type: fill
              (<IRC-Text-View>          name: text)))
          (<Splitter-View>                               style: document location: second orientation: vert mode: absolute division: 100
            (<Scroller-View>                             location: first style: document hscroll?: #t vscroll?: #t
              (<!>                      name: content    layout-type: fill
                (<IRC-Channels-View>    name: channels   multiple-selection?: #t portfolio: :images selection-handler: {Selection-Handler :form on-channel}
                  (<Tree-Node-Column>                    title: "Channel" display-images?: #f toplevel-controls?: #f width: 419))))
            (<Scroller-View>                             location: second style: document hscroll?: #t vscroll?: #t
              (<!>                      name: content    layout-type: fill
                (<IRC-Members-View>     name: members    multiple-selection?: #t portfolio: :images
                  (<Tree-Node-Column>                    title: "Member" display-images?: #f toplevel-controls?: #f width: 419)))))))
      (<IRC-Command-Shell>              name: shell      size: {Dimension 300 15} location: south)))
  
  
  (method override (destroy)
    (disconnect closing?: #t)
    (nextmethod))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (locate-text)
    (locate 'text))
  
  
  (method public (locate-channels)
    (locate 'channels))
  
  
  (method public (locate-members)
    (locate 'members))
  
  
  (method public (locate-shell)
    (locate 'shell))
  
  
  (method (set-preferences form)
    (set! preferences (instantiate~ form)))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-default)
    (acquire-focus~ (get-text~ (locate 'shell))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-quit evt)
    (if (not client)
        (bell)
      (quit-command~ client)))
  
  
  (method (on-reconnect evt)
    (if (not client)
        (bell)
      (reconnect)))
  
  
  (method (on-channel evt)
    (let ((channel (get-single-selected-data~ (locate-channels))))
      (select-channel channel)))
  
  
  (method (on-sound evt)
    (if (not client)
        (bell)
      (set-sound?~ client (get-selected?~ (get-sender~ evt)))))
  
  
  (method (on-debug evt)
    (if (not client)
        (bell)
      (set-debug?~ client (get-selected?~ (get-sender~ evt)))))
  
  
  ;;;
  ;;;; Callbacks
  ;;;
  
  
  (method (notice-callback message)
    (insert message))
  
  
  (method (join-callback nickname user channel-name)
    (insert (format "*** {a} joined {a}" nickname channel-name) 'Command)
    (if (me?~ client nickname)
        (join-channel channel-name)
      (channel-add channel-name nickname)))
  
  
  (method (part-callback nickname user channel-name)
    (insert (format "*** {a} left {a}" nickname channel-name) 'Command)
    (if (me?~ client nickname)
        (part-channel channel-name)
      (channel-remove channel-name nickname)))
  
  
  (method (quit-callback nickname user)
    (insert (format "*** {a} quit" nickname) 'Command)
    (if (me?~ client nickname)
        (post-event
          (lambda ()
            (disconnect)))
      (for-each (lambda (channel)
                  (let ((channel-name (get-name~ channel)))
                    (channel-remove channel-name nickname)))
                channels)))
  
  
  (method (topic-callback channel-name topic)
    (let ((channel (find-channel channel-name)))
      (when channel
        (set-topic~ channel topic)
        (topic-update channel))))
  
  
  (method (topic-owner-callback channel-name owner)
    (let ((channel (find-channel channel-name)))
      (when channel
        (set-topic-owner~ channel owner)
        (topic-owner-update channel))))
  
  
  (method (names-callback channel-name member-names)
    (let ((channel (find-channel channel-name)))
      (when channel
        (let ((actual-members
                (if (get-members-receiving?~ channel)
                    (get-members~ channel)
                  (set-members-receiving?~ channel #t)
                  '())))
          (set-members~ channel (append actual-members member-names))))))
  
  
  (method (names-end-callback channel-name)
    (let ((channel (find-channel channel-name)))
      (when channel
        (set-members-receiving?~ channel #f)
        (members-update channel))))
  
  
  (method (privmsg-callback nickname destination message)
    (let ((channel (find-channel destination)))
      (let ((style (cond ((me?~ client nickname) 'Self)
                         ((highlight? destination message) 'Highlight)
                         ((get-color~ channel) => (lambda (color) (new Text-Style base: 'Base color: color)))
                         (else 'Message))))
        (match-regexp message
          (("\1ACTION (.*)\1" message)
           (insert (format "[{a}] * {a} {a}" destination nickname message) style))
          (else
           (insert (format "[{a}] <{a}> {a}" destination nickname message) style)))
        (unless (me?~ client nickname)
          (when (or (follow? destination) (eq? style 'Highlight))
            (execute-event
              (lambda ()
                (when (get-sound?~ client)
                  (bell))
                (flash-window~ (get-toplevel)))))))))
  
  
  (method (mark-callback)
    (insert (make-string 100 #\-) 'Mark))
  
  
  (method (clear-callback)
    (execute-event
      (lambda ()
        (clear-all~ (locate-text)))))
  
  
  (method (numeric-callback nickname messages)
    (insert (format "*** {l detail: :human}" messages)))
  
  
  (method (default-callback prefix command parameters)
    (insert (format "*** {a} {l detail: :human}" command parameters)))
    
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method (connect)
    (define (setup-ui)
      (clear-all~ (locate-text))
      (remove-every-row~ (locate-channels))
      (remove-every-row~ (locate-members)))
    
    (define (setup-client)
      (set! client (new IRC-Client view: self)))
    
    (define (setup-connection)
      (insert (format "Connecting to {a}"
                      (get-server-address~ client)))
      (connect~ client))
    
    (define (setup-thread)
      (set! thread
            (thread-start!
              (new-thread
                (lambda ()
                  (declare (proper-tail-calls))
                  (let (process)
                    (when (process-input~ client)
                      (process))))))))
    
    (define (setup-interface)
      (set-selected?~ (locate 'sound) (get-sound?~ client))
      (set-selected?~ (locate 'debug) (get-debug?~ client)))
    
    (setup-ui)
    (setup-client)
    (setup-connection)
    (setup-thread)
    (setup-interface)
    client)
  
  
  (method (disconnect (closing?: closing? #f))
    (when thread
      (thread-interrupt! thread thread-exit)
      (set! thread #f))
    (when client
      (let ((server-address (get-server-address~ client)))
        (disconnect~ client)
        (unless closing?
          (insert (format "Disconnected from {a}" server-address)))))
    (set! channel #f)
    (set! channels '())
    (unless closing?
      (remove-every-row~ (locate-channels))
      (remove-every-row~ (locate-members))))
  
  
  (method (reconnect)
    (disconnect)
    (connect)
    ((qala-connect) client))
    
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (insert line (style #f))
    (define (emphasize text line char)
      (when (find line char)
        (let ((emphasis? #f))
          (for-each (lambda (part)
                      (if emphasis?
                          (insert-styled~ text part 'Emphasis)
                        (insert-string~ text part))
                      (set! emphasis? (not emphasis?)))
                    (split-string line char)))
        #t))
    
    (execute-event
      (lambda ()
        (let ((text (locate-text)))
          (let ((end (text-ending~ text)))
            (set-caret~ text end)
            (when (/= (get-col~ end) 0)
              (insert-newline~ text))
            (if style
                (insert-styled~ text line style)
              (or (emphasize text line #\x02)
                  (emphasize text line #\down-arrow)
                  (insert-string~ text line))))))))
    
  
  ;;;
  ;;;; Channels
  ;;;
  
  
  (method (join-channel channel-name)
    (let ((channel (register-channel channel-name))
          (tree (locate-channels)))
      (add-row~ tree children: (list (new Tree-Node title: channel-name)) user-data: channel)
      (select-channel channel)
      (let ((row (user-data-row~ tree channel)))
        (set-single-selection~ tree (row->line~ tree row)))))
  
  
  (method (part-channel channel-name)
    (let ((channel (find-channel channel-name)))
      (if (not channel)
          (bell)
        (unregister-channel channel)
        (let ((tree (locate-channels)))
          (let ((row (user-data-row~ tree channel)))
            (when row
              (remove-row~ tree row)
              (if (> (get-visible-count~ tree) 0)
                  (set-single-selection~ tree 0)
                (select-channel #f))))))))
  
  
  (method (channel-add channel-name member-name)
    (let ((chan (find-channel channel-name)))
      (when chan
        (set-members~ chan (append (get-members~ chan) (list member-name)))
        (when (eq? chan channel)
          (let ((tree (locate-members)))
            (add-row~ tree children: (list (new Tree-Node title: member-name)) user-data: member-name))))))
  
  
  (method (channel-remove channel-name member-name)
    (let ((chan (find-channel channel-name)))
      (when chan
        (set-members~ chan (remove! member-name (get-members~ chan) test: equal?))
        (when (eq? chan channel)
          (let ((tree (locate-members)))
            (let ((row (user-data-row~ tree member-name test: equal?)))
              (when row
                (remove-row~ tree row))))))))
  
  
  (method (register-channel channel-name)
    (define (channel-preferences)
      (or (find-component~ preferences channel-name)
          (find-component~ preferences #f)
          (qala-channel-preferences)))
    
    (let ((pref (channel-preferences)))
      (let ((channel (new IRC-Channel channel-name pref)))
        (set! channels (cons channel channels))
        channel)))
  
  
  (method (unregister-channel channel)
    (set! channels (remove! channel channels)))
  
  
  (method (find-channel name)
    (find channels name key: get-name~ test: equal? return: 'item))
  
  
  (method (require-channel name)
    (or (find-channel name)
        (error "Unregistered channel: {a}" name)))
  
  
  (method (select-channel channel)
    (set! channel~self channel)
    (let ((tree (locate-members)))
      (remove-every-row~ tree)
      (when channel
        (members-update channel)))
    (name-update channel))
  
  
  (method (name-update channel)
    (execute-event
      (lambda ()
        (set-title~ (get-host) (if (not channel)
                                   "IRC"
                                 (present~ channel)))
        (clear-text~ (get-text~ (locate-shell))))))
  
  
  (method (topic-update channel)
    (execute-event
      (lambda ()
        (set-title~ (get-host) (present~ channel)))))
  
  
  (method (topic-owner-update channel)
    )
  
  
  (method (members-update channel)
    (fill-members (get-members~ channel)))

  
  ;;;
  ;;;; Members
  ;;;
  
  
  (method (fill-members member-names)
    (let ((tree (locate-members)))
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (define (standardize-name name)
            (if (starts-with? name "@")
                (tail name 1)
              name))
          
          (for-each (lambda (member-name)
                      (add-row~ tree children: (list (new Tree-Node title: member-name)) user-data: (standardize-name member-name)))
                    (sort di<? member-names))))))

  
  ;;;
  ;;;; Shell
  ;;;
  
  
  (method (process-command command)
    (if (not client)
        (bell)
      (let ((channel-name (and channel (get-name~ channel))))
        (process~ client channel-name command)))))


;;;
;;;; IRC-Channel
;;;


(class IRC-Channel extends Object
  
  
  (slot name               getter generate)
  (slot preferences        getter generate)
  (slot topic              initialize #f  accessors generate)
  (slot topic-owner        initialize #f  accessors generate)
  (slot members            initialize '() accessors generate)
  (slot members-receiving? initialize #f  accessors generate)
  
  
  (method override (initialize name preferences)
    (nextmethod)
    (set! name~self name)
    (set! preferences~self preferences))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method (present)
    (format "{a}{? : {a}~}" name topic))
  
  
  (method (get-color)
    (get-color~ preferences)))


;;;
;;;; IRC-Channels-View
;;;


(class IRC-Channels-View extends Tree-View)


;;;
;;;; IRC-Members-View
;;;


(class IRC-Members-View extends Tree-View)


;;;
;;;; IRC-Text-View
;;;


(class IRC-Text-View extends Text-View
  
  
  (form
    (<install> left-padding: 1 top-padding: 1))
  
  
  (method override (new-model)
    (new Text-Model wrap?: #t))

  
  (method override (install rest)
    (nextmethod rest)
    (let ((pref (preferences)))
      (add-style 'Emphasis  {Text-Style Base font: {Font Label-Bold}})
      (add-style 'Command   {Text-Style Base})
      (add-style 'Self      {Text-Style Base color: {Color Dark-Green}})
      (add-style 'Message   {Text-Style Base color: {Color Dark-Blue}})
      (add-style 'Highlight {Text-Style Base color: {Color Dark-Red}})
      (add-style 'Mark      {Text-Style Base highlight: {Color Light-Red}}))))


;;;
;;;; IRC-Command-Shell
;;;


(class IRC-Command-Shell extends Command-Shell
  
  
  (method override (form-model form)
    (case (get-name~ form)
      ((text) IRC-Command-Text-View)
      (else (nextmethod form)))))


;;;
;;;; IRC-Command-Text-View
;;;


(class IRC-Command-Text-View extends Command-Text-View
  
  
  (form
    (<install> left-padding: 1 top-padding: 1))
  
  
  (method override (default-mode)
    (new IRC-Mode self))
  
  
  (method override (focus-select-all)
    (set-selection (field-range (last-field))))
  
  
  (method override (focus-empty)
    )
  
  
  (method (clear-text)
    (clear-all)
    (let ((view (find-ascendant IRC-View)))
      (let ((channel (get-channel~ view)))
        (when channel
          (let ((color (or (get-color~ channel) {Color Dark-Blue})))
            (add-style 'Separator (new Text-Style base: 'Base color: color))
            (insert-styled (format "{a}: " (get-name~ channel)) 'Separator)))))))


;;;
;;;; IRC-Mode
;;;


(class IRC-Mode extends Command-Mode
  
  
  (method override (mode-actions)
    (find-actions 'irc-mode))
  
  
  (method (on-finish evt)
    (process-command~ (get-guest~ text) (last-content~ text))
    (clear-text~ text))
  
  
  (method (on-cancel evt)
    (cancel)))


;;;
;;;; IRC-Mode-Actions
;;;


(class IRC-Mode-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: finish action-handler: {Event-Handler (:focus :mode) on-finish} shortcut: {Shortcut Return})
      (<Action-Item> name: cancel action-handler: {Event-Handler (:focus :mode) on-cancel} shortcut: {Shortcut :control #\Q} alternate-shortcut: {Shortcut Escape})))))
