;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Qala IRC
;;;


(module qala.irc jazz


(import (jazz.match)
        (qala.settings))


(hub clear-callback)
(hub default-callback)
(hub insert)
(hub join-callback)
(hub mark-callback)
(hub names-callback)
(hub names-end-callback)
(hub notice-callback)
(hub numeric-callback)
(hub part-callback)
(hub privmsg-callback)
(hub quit-callback)
(hub topic-callback)
(hub topic-owner-callback)


(define default-server-address
  "irc.freenode.org")

(define default-port-number
  6667)


;;;
;;;; IRC-Client
;;;


(class IRC-Client extends Object
  
  
  (slot server-address getter generate)
  (slot port-number    getter generate)
  
  
  (slot nick initialize #f accessors generate)
  (slot view initialize #f getter generate)
  (slot port initialize #f getter generate)
  
  
  (slot sound? initialize (qala-sound?) accessors generate)
  (slot debug? initialize (qala-debug?) accessors generate)
  
  
  (method override (initialize self (server-address: server-address #f) (port-number: port-number #f) (view: view #f))
    (nextmethod self)
    (set! self.server-address (or server-address default-server-address))
    (set! self.port-number (or port-number default-port-number))
    (set! self.view view))
  
  
  (method package (me? self nickname)
    (equal? nickname nick))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method public (connect self)
    (set! port (open-tcp-client (list server-address: server-address port-number: port-number))))
  
  
  (method public (disconnect self)
    (when port
      (close-port port)
      (set! port #f)))
  
  
  ;;;
  ;;;; Channels
  ;;;
  
  
  (method public (join-channels self channel-names)
    (for-each join-command channel-names))
  
  
  ;;;
  ;;;; Input
  ;;;
  
  
  (method public (process-input self)
    (let ((line (catch-exception-filter
                  (lambda (exception)
                    #t)
                  (lambda (exception)
                    (insert view "*** disconnected" 'Command)
                    #f)
                  (lambda ()
                    (read-line port)))))
      (unless (or (not line) (eof-object? line))
        (process-line self line)
        #t)))
  
  
  (method (process-line self line)
    (define (process prefix command params)
      (let ((parameters (parse-parameters params)))
        (cond ((ci=? command "332")
               (bind (nickname channel-name topic) parameters
                 (topic-callback view channel-name topic)))
              ((ci=? command "333")
               (bind (nickname channel-name owner) parameters
                 (topic-owner-callback view channel-name owner)))
              ((ci=? command "353")
               (bind (nickname equal channel-name members) parameters
                 (names-callback view channel-name (split members " "))))
              ((ci=? command "366")
               (bind (nickname channel-name) parameters
                 (names-end-callback view channel-name)))
              ((ci=? command "NOTICE")
               (bind (star message) parameters
                 (notice-callback view message)))
              ((ci=? command "PING")
               (let ((reply (car parameters)))
                 (pong-command reply)))
              ((ci=? command "JOIN")
               (receive (nickname user host) (parse-prefix prefix)
                 (let ((channel-name (car parameters)))
                   (join-callback view nickname user channel-name))))
              ((ci=? command "PART")
               (receive (nickname user host) (parse-prefix prefix)
                 (let ((channel-name (car parameters)))
                   (part-callback view nickname user channel-name))))
              ((ci=? command "QUIT")
               (receive (nickname user host) (parse-prefix prefix)
                 (quit-callback view nickname user)))
              ((ci=? command "PRIVMSG")
               (match-regexp prefix
                 (("([^!]+)!([^ ]+)" nickname host)
                  (bind (destination message) parameters
                    (privmsg-callback view nickname destination message)))))
              ((numeric? command)
               (bind (nickname . messages) parameters
                 (numeric-callback view nickname messages)))
              (else
               (default-callback view prefix command parameters)))))
    
    (define (parse-prefix prefix)
      (match-regexp prefix
        (("^([^!]+)!([^ ]+)@([^ ]+)" nickname user host)
         (values nickname user host))))
    
    (define (parse-parameters params)
      (let ((size (string-length params)))
        (let (iter (pos 0) (parameters '()))
          (let ((following (+ pos 1)))
            (if (and (< following size)
                     (eqv? (string-ref params following) #\:))
                (reverse! (cons (substring params (+ following 1) size) parameters))
              (let ((next (find params #\space start: following)))
                (if next
                    (iter next (cons (substring params following next) parameters))
                  (reverse! (cons (substring params following size) parameters)))))))))
    
    (when debug?
      (debug 'received line))
    (match-regexp line
      (("^:([^ ]+) ([^ ]+)(.*)\r$" prefix command params)
       (process prefix command params))
      (("^([^ ]+)(.*)\r$" command params)
       (process #f command params))))
  
  
  ;;;
  ;;;; Output
  ;;;
  
  
  (method public (send self message)
    (display message port)
    (newline port)
    (force-output port)
    (when debug?
      (debug 'sent message)))
  
  
  ;;;
  ;;;; Commands
  ;;;
  
  
  (method public (process self channel-name message)
    (match-regexp message
      (("^/mark$")                                   (mark-command self))
      (("^/clear$")                                  (clear-command self))
      (("^/quit (.+)$" message)                      (quit-command self message))
      (("^/quit$")                                   (quit-command self))
      (("^/me (.+)$" message)                        (action-command self channel-name message))
      (("^/pass (.+)$" password)                     (pass-command self password))
      (("^/nick (.+)$" nickname)                     (nick-command self nickname))
      (("^/user ([^ ]+) (.+)$" user realname)        (user-command self user realname))
      (("^/oper ([^ ]+) (.+)$" name password)        (oper-command self name password))
      (("^/mode$")                                   (mode-command self nick))
      (("^/mode (.+)$" flags)                        (mode-command self nick flags))
      (("^/mode (#.+)$" channel)                     (mode-command self channel))
      (("^/mode (#.+) (.+)$" channel flags)          (mode-command self channel flags))
      (("^/join (.+)$" channel-name)                 (join-command self channel-name))
      (("^/part ([^ ]+)$" channel-name)              (part-command self channel-name))
      (("^/part ([^ ]+) (.+)$" channel-name message) (part-command self channel-name message))
      (("^/part$")                                   (part-command self channel-name))
      (("^/topic (.+)$" message)                     (topic-command self channel-name message))
      (("^/ctcp (.+?) (.+)$" dest message)           (ctcp-command self dest message))
      (("^/notice (.+?) (.+)$" dest message)         (notice-command self dest message))
      (("^/msg (.+?) (.+)$" dest message)            (privmsg-command self dest message))
      (else                                          (privmsg-command self channel-name message))))
  
  
  (method (pong-command self reply)
    (send self (format "PONG {a}" reply)))
  
  
  (method (pass-command self password)
    (send self (format "PASS {a}" password)))
  
  
  (method (nick-command self nickname)
    (send self (format "NICK {a}" nickname))
    (set! nick nickname))
  
  
  (method (user-command self user realname)
    (send self (format "USER {a} 0 * :{a}" user realname)))
  
  
  (method (oper-command self name password)
    (send self (format "OPER {a} {a}" name password)))
  
  
  (method (mode-command self nickname (flags #f))
    (send self (format "MODE {a}{? {a}~}" nickname flags)))
  
  
  (method (privmsg-command self destination message)
    (send self (format "PRIVMSG {a} :{a}" destination message))
    (privmsg-callback view nick destination message))
  
  
  (method (join-command self channel-name)
    (send self (format "JOIN {a}" channel-name)))
  
  
  (method (part-command self channel-name (message ""))
    (send self (format "PART {a} :{a}" channel-name message)))
  
  
  (method (topic-command self channel-name message)
    (send self (format "TOPIC {a} :{a}" channel-name message)))
  
  
  (method (ctcp-command self destination message)
    (privmsg-command destination (string-append "\001" message "\001")))
  
  
  (method (action-command self destination message)
    (ctcp-command destination (string-append "ACTION " message)))
  
  
  (method (notice-command self destination message)
    (send self (format "NOTICE {a} :{a}" destination message)))
  
  
  (method (mark-command self)
    (mark-callback view))
  
  
  (method (clear-command self)
    (clear-callback view))
  
  
  (method package (quit-command self (message ""))
    (send self (format "QUIT :{a}" message)))))
